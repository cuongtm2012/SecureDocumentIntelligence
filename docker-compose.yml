# Docker Compose for SecureDocumentIntelligence
# Professional multi-service OCR application stack

version: '3.8'

services:
  # Main Node.js/Express application
  app:
    build:
      context: .
      dockerfile: Dockerfile.node
    ports:
      - "5000:5000"
    environment:
      - NODE_ENV=production
      - DATABASE_URL=postgresql://ocr_user:secure_password@postgres:5432/ocr_database
      - PYTHON_OCR_SERVICE_URL=http://python-ocr:8001
      - PYTHON_OCR_SERVICE_PORT=8001
      - OPENAI_API_KEY=${OPENAI_API_KEY}
    volumes:
      - ./uploads:/app/uploads
      - ./logs:/app/logs
    depends_on:
      - postgres
      - python-ocr
    restart: unless-stopped
    networks:
      - ocr-network

  # Python OCR microservice
  python-ocr:
    build:
      context: ./python-ocr-service
      dockerfile: Dockerfile
    ports:
      - "8001:8001"
    environment:
      - PYTHONUNBUFFERED=1
      - TESSDATA_PREFIX=/usr/share/tesseract-ocr/4.00/tessdata
    volumes:
      - ./uploads:/app/uploads:ro
      - ./python-ocr-service/logs:/app/logs
    restart: unless-stopped
    networks:
      - ocr-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8001/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # PostgreSQL database
  postgres:
    image: postgres:15-alpine
    environment:
      - POSTGRES_DB=ocr_database
      - POSTGRES_USER=ocr_user
      - POSTGRES_PASSWORD=secure_password
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./database/init:/docker-entrypoint-initdb.d
    ports:
      - "5432:5432"
    restart: unless-stopped
    networks:
      - ocr-network

  # Redis for caching and job queues (optional)
  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    restart: unless-stopped
    networks:
      - ocr-network
    command: redis-server --appendonly yes

  # Nginx reverse proxy (production)
  nginx:
    image: nginx:alpine
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - ./logs/nginx:/var/log/nginx
    depends_on:
      - app
    restart: unless-stopped
    networks:
      - ocr-network

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local

networks:
  ocr-network:
    driver: bridge
